---
description: 
globs: 
alwaysApply: false
---
# 뉴스 컨텐츠 추출기 프로젝트 워크플로우

## 프로젝트 개요
playwright-ghost 기반 뉴스 사이트에서 기사 제목, 본문, 메타데이터를 자동으로 추출하는 도구 개발

## 작업 진행 순서

### 1. 현재 진행 상황 확인
- GitHub Issues에서 마스터 이슈 (#4 📊 프로젝트 진행 상황 추적) 확인
- 완료된 Phase와 진행 중인 Phase 파악
- task- 로 시작하는 task 파일에서 해당 phase에 해당하는 파일을 찾아 상세 작업 내용 참조

### 2. 다음 작업 식별
- 진행 중인 Phase의 GitHub Issue 확인
- 해당 Issue의 체크리스트에서 다음 수행할 Task 확인
- TDD 사이클 (Red-Green-Refactor) 순서 준수

### 3. 작업 실행
- **RED**: 실패하는 테스트 먼저 작성
- **GREEN**: 테스트를 통과하는 최소 코드 작성
- **REFACTOR**: 코드 품질 개선

### 4. 진행 상황 업데이트
- 완료된 Task는 해당 Issue에서 체크박스 업데이트
- Phase 완료 시 새로운 완료 이슈 생성
- 다음 Phase를 위한 새로운 진행 이슈 생성

## Issue 템플릿 관리

### 완료 이슈 템플릿 (`issue-templates/phaseX-completed.md`)
```markdown
## ✅ Phase X: [Phase 이름] 완료

### 완료된 작업들
#### Task X.1: [작업명] ✅
- 구체적인 완료 내용 나열

### 검증 결과
- [x] 테스트 통과 여부
- [x] 빌드 성공 여부

### 다음 단계
Phase X+1: [다음 Phase 이름]

### 관련 파일
- `파일명.ts`
```

### 진행 이슈 템플릿 (`issue-templates/phaseX-todo.md`)
```markdown
## 🚧 Phase X: [Phase 이름]

### 진행 예정 작업들
#### Task X.1: [작업명]
- [ ] RED: 테스트 작성
- [ ] GREEN: 구현
- [ ] REFACTOR: 개선

### 완료 조건
- [ ] 모든 테스트 통과
- [ ] 코드 리뷰 완료

### 예상 소요 시간
약 X시간
```

## 주요 파일 구조

### 설정 파일
- [tsconfig.json](mdc:tsconfig.json) - TypeScript 설정
- [vite.config.ts](mdc:vite.config.ts) - Vitest 테스트 설정
- [package.json](mdc:package.json) - 프로젝트 의존성 및 스크립트

### 소스 코드
- [src/main.ts](mdc:src/main.ts) - 메인 진입점
- `src/config.ts` - 뉴스 사이트 설정 관리 (예정)
- `src/env-loader.ts` - 환경변수 로딩 (예정)
- `src/config-manager.ts` - 설정 관리자 (예정)

### 테스트 파일
- [test/dummy.test.ts](mdc:test/dummy.test.ts) - 기본 테스트
- `test/config.test.ts` - 설정 관련 테스트 (예정)
- `test/env-loader.test.ts` - 환경변수 테스트 (예정)

### 문서
- [task-list-detailed.md](mdc:task-list-detailed.md) - 상세 작업 리스트
- [README.md](mdc:README.md) - 프로젝트 소개
- `issue-templates/` - GitHub Issue 템플릿들

## TDD 개발 원칙

### Red 단계
1. 실패하는 테스트 작성
2. 테스트 실행하여 실패 확인
3. 실패 이유가 명확한지 확인

### Green 단계
1. 테스트를 통과하는 최소한의 코드 작성
2. 테스트 실행하여 통과 확인
3. 기존 테스트들도 모두 통과하는지 확인

### Refactor 단계
1. 코드 품질 개선 (중복 제거, 가독성 향상)
2. 테스트 실행하여 기능 유지 확인
3. 커밋 및 GitHub 업데이트

## 명령어 참조

### 개발 명령어
```bash
npm run build       # TypeScript 빌드
npm start          # 프로젝트 실행
npm run dev        # 개발 모드 (watch)
npm run test       # 테스트 실행
npm run test:run   # 테스트 한 번 실행
npm run test:ui    # 테스트 UI 모드
```

### Git 명령어
```bash
git add .
git commit -m "메시지"
git push
```

### GitHub CLI 명령어
```bash
gh issue list                                    # 이슈 목록 확인
gh issue create --title "제목" --body-file 파일  # 이슈 생성
gh issue view 번호                               # 이슈 상세 보기
```

## 다음 세션 시작 체크리스트

1. [ ] GitHub Issues에서 현재 진행 상황 확인
2. [ ] 마스터 이슈 (#4)에서 "다음 세션 시작점" 확인
3. [ ] 진행 중인 Phase Issue에서 다음 Task 확인
4. [ ] `task-phaseX.md`에서 상세 내용 참조
5. [ ] TDD 사이클에 따라 작업 시작 (RED → GREEN → REFACTOR)
6. [ ] 작업 완료 후 Issue 업데이트 및 커밋
