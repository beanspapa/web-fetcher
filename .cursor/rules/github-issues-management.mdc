---
description: 
globs: 
alwaysApply: false
---
# GitHub Issues 기반 프로젝트 관리

## Issue 관리 체계

### 이슈 유형별 분류

#### 📊 마스터 이슈 (프로젝트 진행 상황 추적)
- **목적**: 전체 프로젝트 진행률 및 현재 상태 추적
- **번호**: #4 (고정)
- **업데이트 주기**: Phase 완료 시마다
- **포함 내용**: 
  - 완료된 Phase 목록
  - 진행 중인 Phase
  - 다음 세션 시작점
  - 기술 스택 현황

#### ✅ 완료 이슈 (Phase 완료 기록)
- **목적**: 완료된 Phase의 상세 기록 보관
- **명명 규칙**: `✅ Phase X: [Phase 이름] 완료`
- **상태**: 완료 후 Close
- **포함 내용**:
  - 완료된 Task 목록
  - 검증 결과
  - 관련 파일 목록
  - 다음 단계 안내

#### 🚧 진행 이슈 (현재 작업 중인 Phase)
- **목적**: 현재 진행 중인 Phase의 작업 관리
- **명명 규칙**: `🚧 Phase X: [Phase 이름]`
- **상태**: 진행 중 Open, 완료 시 Close
- **포함 내용**:
  - 진행 예정 Task 체크리스트
  - 완료 조건
  - 예상 소요 시간

## Issue 템플릿 활용

### 템플릿 파일 위치
- `issue-templates/` 폴더에 관리
- 파일명 규칙: `phaseX-completed.md`, `phaseX-todo.md`

### 완료 이슈 템플릿 사용법
1. `issue-templates/phaseX-completed.md` 파일 생성
2. 완료된 작업 내용으로 템플릿 채우기
3. GitHub CLI로 이슈 생성: `gh issue create --title "제목" --body-file 파일명`
4. 기존 진행 이슈 Close

### 진행 이슈 템플릿 사용법
1. `issue-templates/phaseX-todo.md` 파일 생성
2. `task-phaseX.md` 파일에서 해당 Phase 내용 참조
3. Task별 체크리스트 생성하여 `issue-templates/phaseX-todo.md` 업데이트트
4. `issue-templates/phaseX-todo.md` 파일로 GitHub CLI로 이슈 생성

## Issue 생성 및 관리 명령어

### 이슈 목록 확인
```bash
gh issue list
```

### 이슈 생성
```bash
# 템플릿 파일 사용
gh issue create --title "제목" --body-file issue-templates/파일명.md

# 직접 내용 입력
gh issue create --title "제목" --body "내용"
```

### 이슈 상세 보기
```bash
gh issue view 이슈번호
```

### 이슈 상태 변경
```bash
gh issue close 이슈번호    # 이슈 닫기
gh issue reopen 이슈번호   # 이슈 다시 열기
```

## Phase별 Issue 관리 워크플로우

### Phase 시작 시
1. 이전 Phase 완료 및 문서 업데이트. 관련 이슈 Close
2. 새로운 Phase 진행 관련 문서 생섬 및 이슈 생성
3. 마스터 이슈 (#4) 업데이트

### Phase 진행 중
1. Task 완료 시마다 진행 이슈의 체크박스 업데이트
2. 주요 변경사항은 이슈 댓글로 기록
3. 문제 발생 시 별도 이슈 생성하여 트래킹

### Phase 완료 시
1. 완료 이슈 생성 (모든 Task 완료 기록)
2. 진행 이슈 Close
3. 마스터 이슈 업데이트 (진행률, 다음 시작점)
4. 다음 Phase 진행 이슈 생성

## 마스터 이슈 (#4) 관리

### 업데이트 대상
- **완료된 Phase**: 체크박스 체크
- **진행 중인 Phase**: 현재 작업 중인 Phase 표시
- **진행률**: 완료된 Phase 수 / 전체 Phase 수
- **다음 세션 시작점**: 구체적인 Task 및 파일명 명시
- **기술 스택 현황**: 설치된 패키지 및 설정 상태

### 업데이트 방법
1. `issue-templates/project-tracker.md` 파일 수정
2. GitHub 웹에서 직접 이슈 편집
3. 또는 새로운 댓글로 현재 상황 업데이트

## 다음 세션 시작 프로세스

### 1단계: 현재 상황 파악
```bash
# 이슈 목록 확인
gh issue list

# 마스터 이슈 상세 보기
gh issue view 4
```

### 2단계: 진행 중인 작업 확인
- 진행 중인 Phase Issue에서 다음 Task 확인
- `task-phaseX.md`에서 상세 내용 참조

### 3단계: 작업 시작
- TDD 사이클에 따라 작업 진행
- 각 Task 완료 시 Issue 체크박스 업데이트

## Issue 라벨 시스템 (선택사항)

### 제안하는 라벨
- `phase-1`, `phase-2`, ... : Phase별 구분
- `completed` : 완료된 작업
- `in-progress` : 진행 중인 작업
- `bug` : 버그 관련
- `enhancement` : 기능 개선
- `documentation` : 문서 관련

### 라벨 생성 명령어
```bash
gh label create "phase-1" --color "0075ca" --description "Phase 1 관련 이슈"
```

## 이슈 템플릿 자동화 (향후 개선)

### GitHub Actions 활용 (선택사항)
- Phase 완료 시 자동으로 다음 Phase 이슈 생성
- 마스터 이슈 자동 업데이트
- 진행률 계산 자동화

### 스크립트 작성 (선택사항)
- Issue 생성 자동화 스크립트
- 템플릿 기반 일괄 이슈 생성
